{% extends 'base.html.twig' %}

{% block title %}Joueurs{% endblock %}

{% block body %}
    <div class="row">
        <div class="col-10 col-md-4">
            {{ form_start(formSearch, { 'attr': {'action': path('player_search')}}) }}
            {{ form_row(formSearch.playerSearch,
                {'id': 'playerSearch', 'attr': {'placeholder': 'Novak Djokovic...', 'autocomplete': 'off'}})
            }}
        </div>
        <div class="col-2 col-md-1 pl-0 d-flex align-items-center">
            <button  class="btn btn-info mt-3" type="submit">
                <span class="fas fa-search"></span>
            </button>
            {{ form_end(formSearch)  }}
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        function onKeyUp(event) {
            const url = "{{ path('player_lsearch') }}";
            axios.get(url, {
                params: {
                    query: this.value
                    }
                })
                .then(function (response) {
                    handleResponse(searchInput, response.data)
                })
                .catch(function (error) {
                    console.log(error);
                });
        }

        function handleResponse(inp, arr) {
            var currentFocus;
            var a, b, i, val = inp.value;
            closeAllLists();
            if (!val) { return false;}
            currentFocus = -1;

            a = document.createElement("DIV");
            a.setAttribute("id", inp.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            a.style.border = 'solid 1px'
            inp.parentNode.appendChild(a);

            for (i = 0; i < arr.length; i++) {
                b = document.createElement("DIV");
                b.style.borderBottom = 'solid 1px'
                b.innerHTML = arr[i].name;
                b.innerHTML += "<input type='hidden' value='" + arr[i].name + "'>";
                b.addEventListener("click", function(e) {
                    inp.value = this.getElementsByTagName("input")[0].value;
                    closeAllLists();
                });
                a.appendChild(b);
            }

            inp.addEventListener("keydown", function(e) {
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode === 40) {
                    currentFocus++;
                    addActive(x);
                } else if (e.keyCode === 38) {
                    currentFocus--;
                    addActive(x);
                } else if (e.keyCode === 13) {
                    e.preventDefault();
                    if (currentFocus > -1) {
                        if (x) x[currentFocus].click();
                    }
                }
            });
            function addActive(x) {
                if (!x) return false;
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                /*add class "autocomplete-active":*/
                x[currentFocus].classList.add("text-primary");
                x[currentFocus].classList.add("font-weight-bold");
            }
            function removeActive(x) {
                for (var i = 0; i < x.length; i++) {
                    x[i].classList.remove("text-primary");
                    x[i].classList.remove("font-weight-bold");
                }
            }
            function closeAllLists(elmnt) {
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                    if (elmnt !== x[i] && elmnt !== inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }
            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
        }

        const searchInput = document.getElementById('playerSearch')
        searchInput.addEventListener("input", onKeyUp);
    </script>
{% endblock %}
